---
# Need to run 'ansible-galaxy collection install ansible.posix' before using
- hosts: all
  become: true
  tasks:
  - name: Open ports 6443 and 10250
    ansible.posix.firewalld:
      port: "{{ item }}"
      state: enabled
      permanent: yes
      immediate: yes
    loop:
      - 6443/tcp
      - 10250/tcp

  - name: Set SELinux in permissive mode, logging actions that would be blocked
    ansible.posix.selinux:
      policy: targeted
      state: permissive

  - name: Disable swap for the currently running instance
    shell: |
      swapoff -a

  - name: Ensure swap is disabled on reboot
    replace:
      path: /etc/fstab
      regexp: '^([^#].*?\sswap\s+sw\s+.*)$' # Matches any line that contains swap sw, if it's not already commented
      replace: '# \1'

  - name: Add Docker yum repo
    shell: |
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

  - name: Add Kubernetes yum repo
    yum_repository:
      name: kubernetes
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
      enabled: 1
      gpgcheck: 1
      gpgkey: https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      exclude: kubelet kubeadm kubectl
      description: Kubernetes repo

  - name: Install packages
    yum:
      name:
      - containerd
      - kubelet
      - kubeadm
      - kubectl
      - nfs-utils
      disable_excludes: all
      exclude: kubernetes
      state: present

  - name: Configure containerd networking
    blockinfile:
      create: true
      path: /etc/modules-load.d/containerd.conf
      block: |
        overlay
        br_netfilter

  - name: Enable kernel modules
    shell: |
      modprobe overlay
      modprobe br_netfilter

  - name: Configure IP forwarding and iptables
    blockinfile:
      create: true
      path: /etc/sysctl.conf
      block: |
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1

  - name: Persist changes
    command: sysctl -p

  - name: Get node IP addr
    shell: ip a l eth1 | awk '/inet / { print $2 }' | awk -F '/' '{ print $1 }'
    register: ip

  - name: Print ip
    debug:
      var: ip
      verbosity: 2

  - name: Add node IP addr to kubelet
    replace:
      path: /etc/sysconfig/kubelet
      regexp: '^KUBELET_EXTRA_ARGS='
      replace: 'KUBELET_EXTRA_ARGS=--node-ip={{ ip.stdout }}'


  - name: Remove containerd config.toml
    file:
      path: /etc/containerd/config.toml
      state: absent

  - name: Start service containerd
    systemd:
      name: containerd
      state: restarted
      enabled: true

  - name: Enable service kubelet
    systemd:
      name: kubelet 
      enabled: true

  - name: Initialize control-plane node
    command: kubeadm init --apiserver-advertise-address "192.168.56.10" --apiserver-cert-extra-sans "192.168.56.10" --pod-network-cidr 172.100.0.0/16

  # Set up a Pod netowork add-on - Calico
  - name: Download Calico.conf
    get_url:
      url: https://docs.projectcalico.org/v3.25/manifests/calico.yaml
      dest: /home/vagrant/calico.yaml

  - name: Uncomment Calico IPv4 pool option
    replace:
      path: /home/vagrant/calico.yaml
      regexp: '^\s{12}#\s*- name: CALICO_IPV4POOL_CIDR.*$'
      replace: '            - name: CALICO_IPV4POOL_CIDR'

  - name: Set IPv4 pool to pod-network passed to kubeadm
    replace:
      path: /home/vagrant/calico.yaml
      regexp: '^\s{12}#\s*  value: "192.168.0.0\/16".*$'
      replace: '              value: "172.100.0.0/16"'

  - name: Create kube directory for vagrant user
    file:
      path: /home/vagrant/.kube
      state: directory

  - name: Set up kubectl for vagrant user
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/vagrant/.kube/config
      remote_src: yes
      owner: vagrant
      group: vagrant
      mode: '0644'

  - name: Install Calico
    command: kubectl apply -f /home/vagrant/calico.yaml
    become: false

  - name: Generate join command for worker nodes
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join"

  - name: Insert cluster's servers in /etc/hosts
    blockinfile:
      path: /etc/hosts
      block: |
        192.168.56.9  nfs-server.chmurki.kti.pl nfs-server
        192.168.56.10 controlplane.chmurki.kti.pl controlplane
        192.168.56.11 node-1.chmurki.kti.pl node-1
        192.168.56.12 node-2.chmurki.kti.pl node-2
